{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/FeedbackSection/FeedbackSection.module.css","components/Notification/Notification.module.css","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/FeedbackSection/FeedbackSection.js","App.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","percentage","className","styles","stats","statItem","number","FeedbackOptions","increaseValue","options","btnWrapper","map","option","index","btn","type","onClick","Section","title","children","section","defaultProps","Notification","message","text","FeedbackSection","countTotalFeedback","countPositiveFeedbackPercentage","subtitle","App","useState","setGood","setNeutral","setBad","increaseGood","increaseNeutral","increaseBad","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.262e436b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"Statistics_stats__3stUL\",\"statItem\":\"Statistics_statItem__2C8d9\",\"number\":\"Statistics_number__26tXS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnWrapper\":\"FeedbackOptions_btnWrapper__2ZN-0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Ap5Zy\",\"title\":\"Section_title__2S6oE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subtitle\":\"FeedbackSection_subtitle__2B6n5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Notification_text__3WvWm\"};","import React from 'react';\nimport styles from './Statistics.module.css';\n\nconst Statistics = ({ good, neutral, bad, total, percentage }) => (\n  <ul className={styles.stats}>\n    <li className={styles.statItem}>\n      <span>\n        Good: <span className={styles.number}>{good}</span>\n      </span>\n    </li>\n    <li className={styles.statItem}>\n      <span>\n        Neutral: <span className={styles.number}>{neutral}</span>\n      </span>\n    </li>\n    <li className={styles.statItem}>\n      <span>\n        Bad: <span className={styles.number}>{bad}</span>\n      </span>\n    </li>\n    <li className={styles.statItem}>\n      <span>\n        Total: <span className={styles.number}>{total()}</span>\n      </span>\n    </li>\n    <li className={styles.statItem}>\n      <span>\n        Positive feedback: <span className={styles.number}>{`${percentage()} %`}</span>\n      </span>\n    </li>\n  </ul>\n);\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ increaseValue, options }) => (\n  <div className={styles.btnWrapper}>\n    {options.map((option, index) => (\n      <button\n        key={index}\n        className={styles.btn}\n        type=\"button\"\n        onClick={() => increaseValue(option)}\n      >\n        {option}\n      </button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  increaseValue: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <section className={styles.section}>\n    <h1 className={styles.title}>{title}</h1>\n    {children}\n  </section>\n);\n\nSection.defaultProps = {\n  title: '',\n  children: [],\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Notification.module.css';\n\nconst Notification = ({ message }) => <p className={styles.text}>{message}</p>;\n\nNotification.defaultProps = {\n  message: 'Oops, something went wrong here :(',\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './FeedbackSection.module.css';\n\nimport Statistics from '../Statistics';\nimport FeedbackOptions from '../FeedbackOptions';\nimport Section from '../Section';\nimport Notification from '../Notification';\n\nconst FeedbackSection = ({\n  increaseValue,\n  countTotalFeedback,\n  countPositiveFeedbackPercentage,\n  good,\n  neutral,\n  bad,\n}) => (\n  <Section title=\"Please, leave your feedback here:\">\n    <FeedbackOptions increaseValue={increaseValue} options={['good', 'neutral', 'bad']} />\n    <h2 className={styles.subtitle}>Statistics</h2>\n    {countTotalFeedback() === 0 ? (\n      <Notification message=\"No feedback given\"></Notification>\n    ) : (\n      <Statistics\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        total={countTotalFeedback}\n        percentage={countPositiveFeedbackPercentage}\n      />\n    )}\n  </Section>\n);\n\nFeedbackSection.propTypes = {\n  increaseValue: PropTypes.func.isRequired,\n  countTotalFeedback: PropTypes.func.isRequired,\n  countPositiveFeedbackPercentage: PropTypes.func.isRequired,\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n};\n\nexport default FeedbackSection;\n","// import './App.css';\nimport React, { useState } from 'react';\nimport FeedbackSection from './components/FeedbackSection';\n\nconst App = () => {\n  const { good, setGood } = useState(0);\n  const { neutral, setNeutral } = useState(0);\n  const { bad, setBad } = useState(0);\n\n  const increaseGood = () => {\n    setGood(good + 1);\n  };\n  const increaseNeutral = () => {\n    setNeutral(good + 1);\n  };\n  const increaseBad = () => {\n    setBad(good + 1);\n  };\n\n  const countTotalFeedback = () => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () => ((good / countTotalFeedback()) * 100).toFixed(2);\n\n  return (\n    <div className=\"App\">\n      <FeedbackSection\n        increaseGood={increaseGood}\n        increaseNeutral={increaseNeutral}\n        increaseBad={increaseBad}\n        countTotalFeedback={countTotalFeedback}\n        countPositiveFeedbackPercentage={countPositiveFeedbackPercentage}\n        good={good}\n        neutral={neutral}\n        bad={bad}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}